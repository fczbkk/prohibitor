function checkContent(root, selector, keywords) {    if (root.querySelectorAll) {        var elements = root.querySelectorAll(selector);        for (var i = 0, j = elements.length; i < j; i++) {            var element = elements[i];            if (element.textContent.match(keywords)) {                element.style.display = 'none';            }        }    }}for (site in blacklist.sites) {    var re = new RegExp(site);    if (document.location.host.match(re)) {            var selector = blacklist.sites[site].join(',');        var keywords = new RegExp(blacklist.keywords.join('|'), 'i');            var observer = new WebKitMutationObserver(function (mutations) {            for (i in mutations) {                for (j = 0, l = mutations[i].addedNodes.length; j < l; j++) {                    checkContent(mutations[i].addedNodes[j], selector, keywords);                }            }        });        var observerConfig = {            childList : true,   // observe changes in document structure            subtree : true      // observe every element (if applied to BODY)        };        checkContent(document.body, selector, keywords);        observer.observe(document.body, observerConfig);    }}